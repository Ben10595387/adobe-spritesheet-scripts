/**
 * MakeSpriteSheet_AfterEffects_Step2.jsx
 * 
 * Intended for UDK/UE3 content creators, this script enables the user to export an After Effects composition
 * to a grid-like sprite sheet. The user is also given the option of automatically resizing and saving 
 * the sprite sheet in multiple different sizes/resolutions.
 *
 * @author Rohan Liston
 * @version 1.0
 * @date 14-Feb-2012
 *
 * Feel free to distribute and mangle this script as you like, but please give credit where it is due. 
 * If you find a bug or come up with any cool new features, drop me a line at http://www.rohanliston.com !
 */

#script "Make Sprite Sheet"
#target photoshop

var INIFilename = $.fileName.substr(0, $.fileName.lastIndexOf('/')) + "/MakeSpriteSheet_AfterEffects.ini";   // The INI file that was generated by the AE script

var numRows, numCols;                   // Number of rows and columns in the sprite sheet
var spriteSheetDoc;                     // The document that will contain the sprite sheet
var AEPPath;                            // The absolute path of the After Effects project this image sequence came from
var exportFolder;                       // Where the sprite sheets will be saved
var exportNum = 1;                      // The number assigned to this export - stops overwriting old versions
var sheetFilename;                      // The filename this sprite sheet will be given
var fileFormat;                         // Export file format (PNG/TGA)
var bitDepth;                           // Export bit depth (24-bit/32-bit)
var autoSave;                           // Whether we should save directly after the sheet is created or let the user save manually
var sheetSizes = new Array();           // Sheet sizes to export (2048, 1024, 512, etc.)

app.bringToFront();
app.preferences.rulerUnits = Units.PIXELS;
main();

/**
 * Main function
 */
function main()
{   
    readINIFile();
    makeSpriteSheet(); 
    
    if(autoSave)
        saveFiles(); 
        
    app.bringToFront();
	
	if(autoSave)
		alert("Success! Your exported sprite sheets can be found in " + Folder.decode(exportFolder.absoluteURI) + ".");
}

/**
 * Reads the sprite sheet options from the INI file
 */
function readINIFile()
{
    // Open the INI file
    var INIFile = new File(INIFilename);
    INIFile.open("r");
    
    // Read the settings (project name, num rows/cols, etc)
    sheetFilename = INIFile.readln();
    AEPPath = INIFile.readln();; 
    numCols = parseInt(INIFile.readln());
    numRows = parseInt(INIFile.readln());
    spriteSheetDoc = app.documents.add(parseInt(INIFile.readln()), parseInt(INIFile.readln()));   // Creates a new document, reading in the X and Y pixel dimensions from the file
    autoSave = INIFile.readln() == "true" ? true : false;
    
    // Build the sheetSizes array which tells us what file sizes to save
    var sizesStr = INIFile.readln().split(",");
    for(i=0; i<sizesStr.length; i++)
        sheetSizes[i] = sizesStr[i];
   
    fileFormat = INIFile.readln();
    bitDepth = INIFile.readln();
    
    // Open each frame file and copy its contents into our main document as a new layer
    while(!INIFile.eof)
    {
        var frameFile = new File(INIFile.readln());
        var tempDoc = app.open(frameFile);
        tempDoc.selection.selectAll();
        tempDoc.selection.copy();
        app.activeDocument = spriteSheetDoc;
        spriteSheetDoc.paste();
        tempDoc.close();
    }

    // Get rid of the background layer
    spriteSheetDoc.artLayers["Background"].remove();
    INIFile.close();
}

/**
 * Saves the document with the (square) dimensions specified. 
 * @param size - The size of the image in pixels (eg. 2048, 1024, etc)
 */
function saveFile(size)
{
    // Save the current state so we can revert back after resizing/saving
    var savedState = spriteSheetDoc.activeHistoryState;    
    var sheetFile = new File(exportFolder + "/" + sheetFilename + "_" + size);
    var saveOptions;
    
    // Set the file save options
    if(fileFormat == "PNG")
    {
        saveOptions = new PNGSaveOptions();  
        saveOptions.interlaced = false;
    }
    else
    {
        saveOptions = new TargaSaveOptions();
        saveOptions.resolution = bitDepth == "32" ? TargaBitsPerPixels.THIRTYTWO : TargaBitsPerPixels.TWENTYFOUR;
        saveOptions.alphaChannels = bitDepth == "32" ? true : false;
        saveOptions.rleCompression = true;
    }
 
    // Resize, save, then revert back to original state
    spriteSheetDoc.resizeImage(size, size);
    spriteSheetDoc.saveAs(sheetFile, saveOptions, true, Extension.LOWERCASE);
    spriteSheetDoc.activeHistoryState = savedState;
}

/**
 * Saves the files in whatever sizes were specified in the After Effects dialog.
 */
function saveFiles()
{
    app.activeDocument = spriteSheetDoc;
    
    createExportFolder();
        
    for(i=0; i<sheetSizes.length; i++)
    {
        saveFile(parseInt(sheetSizes[i]));
    }
}

/**
 * Arranges the document layers into a sprite sheet with 
 * whatever settings were specified in the After Effects dialog.
 */
function makeSpriteSheet()
{
    // Get the document/frame properties
    var activeLayer = spriteSheetDoc.activeLayer;
    var numLayers = spriteSheetDoc.artLayers.length;   
    var spriteSizeX = spriteSheetDoc.width;
    var spriteSizeY = spriteSheetDoc.height;   

    // Resize the canvas
    spriteSheetDoc.resizeCanvas(spriteSizeX*numCols, spriteSizeY*numRows, AnchorPosition.TOPLEFT );

    var currentRow = 0;
    var currentCol = 0;

    // Move each layer into the correct spot
    for(i=numLayers-1; i>=0; i--)
    {    
        spriteSheetDoc.artLayers[i].visible = 1;
        spriteSheetDoc.artLayers[i].translate(spriteSizeX*currentCol, spriteSizeY*currentRow);

        currentCol++;
        if(currentCol > numCols-1)
        {
            currentRow++;
            currentCol = 0;
        }
    }

    // Merge everything together
    spriteSheetDoc.mergeVisibleLayers();
}


/**
 * Creates a folder for the sprite sheet under "./Sprite Sheets/<RENDER_NUM>. 
 * Recursively searches for a unique folder name.
 */
function createExportFolder()
{
    var newFolder = new Folder(AEPPath + "/SpriteSheets/" + sheetFilename + "/" + pad(exportNum,3));

    if(!newFolder.exists)
    {
        if(!newFolder.create())
            alert("Could not create output folder. Make sure \"Allow Scripts to Write Files and Access Network\" is enabled under Edit->Preferences->General.");
        else
            exportFolder = newFolder;
    }
    else
    {
        exportNum++;
        createExportFolder();
    }
}

/**
 * Pad a number with leading zeros
 * @param number - the number to pad
 * @param length - the desired length of the number string after padding
 * @return - a string representing the padded number
 */
function pad(number, length) 
{ 
    var str = '' + number;
    
    while (str.length < length) 
        str = '0' + str;
   
    return str;
}